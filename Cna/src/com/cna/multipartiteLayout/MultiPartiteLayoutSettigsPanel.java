/*
Copyright 2008-2010 Gephi
Authors : Mathieu Bastian <mathieu.bastian@gephi.org>
Website : http://www.gephi.org

This file is part of Gephi.

DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 2011 Gephi Consortium. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 3 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://gephi.org/about/legal/license-notice/
or /cddl-1.0.txt and /gpl-3.0.txt. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License files at
/cddl-1.0.txt and /gpl-3.0.txt. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 3, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 3] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 3 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 3 code and therefore, elected the GPL
Version 3 license, then the option applies only if the new code is
made subject to such option by the copyright holder.

Contributor(s):

Portions Copyrighted 2011 Gephi Consortium.
Portions Copyrighted 2013 Kemal Beşkardeşler
*/

package com.cna.multipartiteLayout;

import java.awt.event.ActionListener;
import org.gephi.data.attributes.api.AttributeColumn;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.data.attributes.api.AttributeModel;
import org.openide.util.Lookup;

/**
 *
 * @author kemalbeskardesler
 */
public class MultiPartiteLayoutSettigsPanel extends javax.swing.JPanel {

    public static String ATTRIBUTE_SELECTION_DESC = 
            "Select attribute name for\nconstructing layers.";
    public static String SPEED_DESC = 
            "Set speed of the algorithm.";
    public static String REFRESH_DESC = 
            "Refresh layer selection\nattributes.";
    private final MultipartiteLayout multipartiteLayoutInstance;
    
    /**
     * Creates new form MultiPartiteLayoutSettigsPanel
     */
    public MultiPartiteLayoutSettigsPanel(MultipartiteLayout layout) {
        initComponents();
        this.multipartiteLayoutInstance = layout;
        initializeLayerAttributesComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbLayerAttribute = new javax.swing.JComboBox();
        lblLayerAttribute = new javax.swing.JLabel();
        lblSpeed = new javax.swing.JLabel();
        numSpeed = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();

        cmbLayerAttribute.setMaximumRowCount(50);
        cmbLayerAttribute.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbLayerAttribute.setToolTipText(org.openide.util.NbBundle.getMessage(MultiPartiteLayoutSettigsPanel.class, "MultiPartiteLayoutSettigsPanel.cmbLayerAttribute.toolTipText")); // NOI18N
        cmbLayerAttribute.setName("cmbLayerSelection"); // NOI18N
        cmbLayerAttribute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbLayerAttributeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cmbLayerAttributeMouseEntered(evt);
            }
        });
        cmbLayerAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLayerAttributeActionPerformed(evt);
            }
        });

        lblLayerAttribute.setLabelFor(cmbLayerAttribute);
        org.openide.awt.Mnemonics.setLocalizedText(lblLayerAttribute, org.openide.util.NbBundle.getMessage(MultiPartiteLayoutSettigsPanel.class, "MultiPartiteLayoutSettigsPanel.lblLayerAttribute.text")); // NOI18N
        lblLayerAttribute.setToolTipText(org.openide.util.NbBundle.getMessage(MultiPartiteLayoutSettigsPanel.class, "MultiPartiteLayoutSettigsPanel.lblLayerAttribute.toolTipText")); // NOI18N
        lblLayerAttribute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLayerAttributeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLayerAttributeMouseEntered(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblSpeed, org.openide.util.NbBundle.getMessage(MultiPartiteLayoutSettigsPanel.class, "MultiPartiteLayoutSettigsPanel.lblSpeed.text")); // NOI18N
        lblSpeed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSpeedMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblSpeedMouseEntered(evt);
            }
        });

        numSpeed.setEditor(new javax.swing.JSpinner.NumberEditor(numSpeed, ""));
        numSpeed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                numSpeedMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                numSpeedMouseEntered(evt);
            }
        });
        numSpeed.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numSpeedPropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MultiPartiteLayoutSettigsPanel.class, "MultiPartiteLayoutSettigsPanel.jLabel1.text")); // NOI18N

        btnRefresh.setIcon(new javax.swing.ImageIcon("/Developer/GitHub/Gephi/gephi-plugins/Cna/refresh.png")); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnRefresh, org.openide.util.NbBundle.getMessage(MultiPartiteLayoutSettigsPanel.class, "MultiPartiteLayoutSettigsPanel.btnRefresh.text")); // NOI18N
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRefreshMouseEntered(evt);
            }
        });
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        txtDescription.setEditable(false);
        txtDescription.setColumns(15);
        txtDescription.setRows(5);
        txtDescription.setAutoscrolls(false);
        jScrollPane1.setViewportView(txtDescription);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblSpeed)
                            .add(lblLayerAttribute))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(numSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(btnRefresh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbLayerAttribute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jLabel1))
                .add(12, 12, 12))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(1, 1, 1)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblSpeed)
                    .add(numSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(btnRefresh)
                    .add(cmbLayerAttribute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblLayerAttribute))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        lblLayerAttribute.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(MultiPartiteLayoutSettigsPanel.class, "MultiPartiteLayoutSettigsPanel.lblLayerAttribute.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void lblLayerAttributeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLayerAttributeMouseClicked
        txtDescription.setText(ATTRIBUTE_SELECTION_DESC);
    }//GEN-LAST:event_lblLayerAttributeMouseClicked

    private void cmbLayerAttributeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbLayerAttributeMouseClicked
        txtDescription.setText(ATTRIBUTE_SELECTION_DESC);
    }//GEN-LAST:event_cmbLayerAttributeMouseClicked

    private void cmbLayerAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLayerAttributeActionPerformed
        multipartiteLayoutInstance.setLayerAttributeString(cmbLayerAttribute.getSelectedItem().toString());
    }//GEN-LAST:event_cmbLayerAttributeActionPerformed

    private void lblSpeedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSpeedMouseClicked
        txtDescription.setText(SPEED_DESC);
    }//GEN-LAST:event_lblSpeedMouseClicked

    private void numSpeedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numSpeedMouseClicked
        txtDescription.setText(SPEED_DESC);
    }//GEN-LAST:event_numSpeedMouseClicked

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        initializeLayerAttributesComboBox();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void numSpeedPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_numSpeedPropertyChange
        multipartiteLayoutInstance.speed = ((Integer)(this.numSpeed.getValue())).floatValue();
        long sleepTime = (long)(MultipartiteLayout.MAX_WAITING_TIME / multipartiteLayoutInstance.speed);
        if(sleepTime >= 0)
        {
            multipartiteLayoutInstance.sleepWaitTime = sleepTime;
        }
    }//GEN-LAST:event_numSpeedPropertyChange

    private void lblSpeedMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSpeedMouseEntered
        txtDescription.setText(SPEED_DESC);
    }//GEN-LAST:event_lblSpeedMouseEntered

    private void numSpeedMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numSpeedMouseEntered
        txtDescription.setText(SPEED_DESC);
    }//GEN-LAST:event_numSpeedMouseEntered

    private void lblLayerAttributeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLayerAttributeMouseEntered
        txtDescription.setText(ATTRIBUTE_SELECTION_DESC);
    }//GEN-LAST:event_lblLayerAttributeMouseEntered

    private void cmbLayerAttributeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbLayerAttributeMouseEntered
        txtDescription.setText(ATTRIBUTE_SELECTION_DESC);
    }//GEN-LAST:event_cmbLayerAttributeMouseEntered

    private void btnRefreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseEntered
        txtDescription.setText(REFRESH_DESC);
    }//GEN-LAST:event_btnRefreshMouseEntered

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    public javax.swing.JComboBox cmbLayerAttribute;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLayerAttribute;
    private javax.swing.JLabel lblSpeed;
    public javax.swing.JSpinner numSpeed;
    public javax.swing.JTextArea txtDescription;
    // End of variables declaration//GEN-END:variables

    public void initializeLayerAttributesComboBox()
    {
        ActionListener [] actionListeners = this.cmbLayerAttribute.getActionListeners();
        
        for (ActionListener actionListener : actionListeners) {
            this.cmbLayerAttribute.removeActionListener(actionListener);
        }
        
        this.cmbLayerAttribute.removeAllItems();
        this.cmbLayerAttribute.addItem("");
        
        // Add attributes to layer choice description
        AttributeModel am = Lookup.getDefault().lookup(AttributeController.class).getModel();
        for(AttributeColumn column : am.getNodeTable().getColumns())
        {
            String columnTitle = column.getTitle();
            if(!columnTitle.equalsIgnoreCase("Id") && !columnTitle.equalsIgnoreCase("Label"))
            {
                
                this.cmbLayerAttribute.addItem(columnTitle);
            }
        }
        
        for (ActionListener actionListener : actionListeners) {
            this.cmbLayerAttribute.addActionListener(actionListener);
        }
    }
}
